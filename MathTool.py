#%%
from IPython.display import display
from sympy import *
import sympy
sympy.init_printing(use_latex='mathjax')
import numpy as np

#%%
# 待解未知數 
a13, a14, a21, a22, a23, a33, a34 = symbols("a13 a14 a21 a22 r23 a33 a34")

# 時間變數 
'''
t1 = t1-t0
t2 = t2-t1
t3 = t3-t2
'''
t1, t2, t3 = symbols("t1 t2 t3")

# 關係式變數 
P1, P2, P3, Vinit, Ainit, Vfinal, Afinal = symbols("P1 P2 P3 Vinit Ainit Vfinal Afinal") 


# X 矩陣
X =  sympy.Matrix([a13, a14, a21, a22, a23, a33, a34])
C =  sympy.Matrix([[1, 1, 0, 0, 0, 0, 0],
             [3/t1, 4/t1, -1/t2, 0, 0, 0, 0],
             [6/t1**2, 12/t1**2, 0, -2/t2**2, 0, 0, 0],
             [0, 0, 1, 1, 1, 0, 0],
             [0, 0, 1/t2, 2/t2, 3/t2, -3/t3, 4/t3],
             [0, 0, 0, 2/t2**2, 6/t2**2, 6/t3**2, -12/t3**2],
             [0, 0, 0, 0, 0, 1, -1]])

Y = sympy.Matrix([P1-(Ainit*t1**2)/2-Vinit*t1**2,
                  -Ainit*t1-Vinit,
                  -Ainit/t1,
                  P2,
                  Vfinal-Afinal*t3,
                  Afinal,
                  P3-Vfinal*t3-(Afinal*t3**2)/2])
c_1 = np.linalg.pinv(C)
display(c_1)
# display('X :', X.shape, 'C :', C.shape, 'Y :', Y.shape)

# try:
#     # 尝试计算逆矩阵
#     c_inv = C.inv()
#     print("Matrix is invertible.")
# except ValueError:
#     print("Matrix is not invertible.")

# X = invC * Y
# invC = C.inv()
# print(invC)

# display(X.shape)
# display(C.shape)

C_inv = sympy.Matrix([[(4*t1**2*t3**2 + 16*t1*t2**3 - 4*t1*t2*t3**2 + 12*t2**4 - 6*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
         (-t1**3*t3**2 - 4*t1**2*t2**3 + 2*t1**2*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
         (-2*t1**2*t2*t3**2 - 6*t1*t2**4 + 3*t1*t2**2*t3**2)/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2), 
         (-t1**2*t3**2 - 6*t1*t2**3 + 3*t1*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
         (2*t1**2*t2**3 - t1**2*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
         t1**2*t2**2*t3**2/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2), 
         (6*t1**2*t2**2 - 4*t1**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)], 
         [(-3*t1**2*t3**2 - 12*t1*t2**3 + 4*t1*t2*t3**2 - 6*t2**4 + 3*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
          (t1**3*t3**2 + 4*t1**2*t2**3 - 2*t1**2*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
          (2*t1**2*t2*t3**2 + 6*t1*t2**4 - 3*t1*t2**2*t3**2)/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2), 
          (t1**2*t3**2 + 6*t1*t2**3 - 3*t1*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
          (-2*t1**2*t2**3 + t1**2*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
          -t1**2*t2**2*t3**2/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2), 
          (-6*t1**2*t2**2 + 4*t1**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)], 
          [(4*t1*t2*t3**2 + 12*t2**4 - 6*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
           (-2*t1**2*t2*t3**2 - 6*t1*t2**4 + 3*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
           (2*t1**2*t2*t3**2 + 6*t1*t2**4 - 3*t1*t2**2*t3**2)/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2), 
           (t1**2*t3**2 + 6*t1*t2**3 - 3*t1*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
           (-2*t1**2*t2**3 + t1**2*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
           -t1**2*t2**2*t3**2/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2), 
           (-6*t1**2*t2**2 + 4*t1**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)], 
           [(-6*t1*t2*t3**2 - 24*t2**4 + 12*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
            (3*t1**2*t2*t3**2 + 12*t1*t2**4 - 6*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
            (-t1**2*t2*t3**2 - 4*t1*t2**4 + 2*t1*t2**2*t3**2)/(2*t1**2*t3**2 + 8*t1*t2**3 + 12*t2**4 - 6*t2**2*t3**2), 
            (3*t1*t2*t3**2 + 18*t2**4 - 9*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
            (-6*t1*t2**4 + 3*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
            -t1*t2**3*t3**2/(2*t1**2*t3**2 + 8*t1*t2**3 + 12*t2**4 - 6*t2**2*t3**2), 
            (-18*t1*t2**3 + 12*t1*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)], 
            [(2*t1*t2*t3**2 + 12*t2**4 - 6*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
             (-t1**2*t2*t3**2 - 6*t1*t2**4 + 3*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
             (t1**2*t2*t3**2 + 6*t1*t2**4 - 3*t1*t2**2*t3**2)/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2), 
             (-2*t1*t2**3 - 12*t2**4 + 6*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
             (2*t1**2*t2**3 - t1**2*t2*t3**2 + 6*t1*t2**4 - 3*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
             (t1**2*t2**2*t3**2 + 3*t1*t2**3*t3**2)/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2), 
             (6*t1**2*t2**2 - 4*t1**2*t3**2 + 18*t1*t2**3 - 12*t1*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)], 
             [2*t2**2*t3**2/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
              -t1*t2**2*t3**2/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
              t1*t2**2*t3**2/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2), 
              (-t1*t2*t3**2 - 3*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
              (t1**2*t2*t3**2 + 2*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
              (-2*t1*t2**3*t3**2 - 3*t2**4*t3**2)/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2), 
              (4*t1**2*t3**2 + 4*t1*t2**3 + 8*t1*t2*t3**2 + 6*t2**4)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)], 
              [2*t2**2*t3**2/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
               t1*t2**2*t3**2/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
               t1*t2**2*t3**2/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2), 
               (-t1*t2*t3**2 - 3*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
               (t1**2*t2*t3**2 + 2*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2), 
               (-2*t1*t2**3*t3**2 - 3*t2**4*t3**2)/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2), 
               (3*t1**2*t3**2 + 8*t1*t2*t3**2 + 3*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)]])

# X1 = C_inv @ Y

X1 = sympy.Matrix([[Afinal*t1**2*t2**2*t3**2/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2) - Ainit*(-2*t1**2*t2*t3**2 - 6*t1*t2**4 + 3*t1*t2**2*t3**2)/(t1*(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2)) + P2*(-t1**2*t3**2 - 6*t1*t2**3 + 3*t1*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Afinal*t3 + Vfinal)*(2*t1**2*t2**3 - t1**2*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Ainit*t1 - Vinit)*(-t1**3*t3**2 - 4*t1**2*t2**3 + 2*t1**2*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (6*t1**2*t2**2 - 4*t1**2*t3**2)*(-Afinal*t3**2/2 + P3 - Vfinal*t3)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Ainit*t1**2/2 + P1 - Vinit*t1**2)*(4*t1**2*t3**2 + 16*t1*t2**3 - 4*t1*t2*t3**2 + 12*t2**4 - 6*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)], 
                [-Afinal*t1**2*t2**2*t3**2/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2) - Ainit*(2*t1**2*t2*t3**2 + 6*t1*t2**4 - 3*t1*t2**2*t3**2)/(t1*(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2)) + P2*(t1**2*t3**2 + 6*t1*t2**3 - 3*t1*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Afinal*t3 + Vfinal)*(-2*t1**2*t2**3 + t1**2*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Ainit*t1 - Vinit)*(t1**3*t3**2 + 4*t1**2*t2**3 - 2*t1**2*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-6*t1**2*t2**2 + 4*t1**2*t3**2)*(-Afinal*t3**2/2 + P3 - Vfinal*t3)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Ainit*t1**2/2 + P1 - Vinit*t1**2)*(-3*t1**2*t3**2 - 12*t1*t2**3 + 4*t1*t2*t3**2 - 6*t2**4 + 3*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)], 
                [-Afinal*t1**2*t2**2*t3**2/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2) - Ainit*(2*t1**2*t2*t3**2 + 6*t1*t2**4 - 3*t1*t2**2*t3**2)/(t1*(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2)) + P2*(t1**2*t3**2 + 6*t1*t2**3 - 3*t1*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Afinal*t3 + Vfinal)*(-2*t1**2*t2**3 + t1**2*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Ainit*t1 - Vinit)*(-2*t1**2*t2*t3**2 - 6*t1*t2**4 + 3*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-6*t1**2*t2**2 + 4*t1**2*t3**2)*(-Afinal*t3**2/2 + P3 - Vfinal*t3)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Ainit*t1**2/2 + P1 - Vinit*t1**2)*(4*t1*t2*t3**2 + 12*t2**4 - 6*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)], 
                [-Afinal*t1*t2**3*t3**2/(2*t1**2*t3**2 + 8*t1*t2**3 + 12*t2**4 - 6*t2**2*t3**2) - Ainit*(-t1**2*t2*t3**2 - 4*t1*t2**4 + 2*t1*t2**2*t3**2)/(t1*(2*t1**2*t3**2 + 8*t1*t2**3 + 12*t2**4 - 6*t2**2*t3**2)) + P2*(3*t1*t2*t3**2 + 18*t2**4 - 9*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Afinal*t3 + Vfinal)*(-6*t1*t2**4 + 3*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Ainit*t1 - Vinit)*(3*t1**2*t2*t3**2 + 12*t1*t2**4 - 6*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-18*t1*t2**3 + 12*t1*t2*t3**2)*(-Afinal*t3**2/2 + P3 - Vfinal*t3)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Ainit*t1**2/2 + P1 - Vinit*t1**2)*(-6*t1*t2*t3**2 - 24*t2**4 + 12*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)], 
                [Afinal*(t1**2*t2**2*t3**2 + 3*t1*t2**3*t3**2)/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2) - Ainit*(t1**2*t2*t3**2 + 6*t1*t2**4 - 3*t1*t2**2*t3**2)/(t1*(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2)) + P2*(-2*t1*t2**3 - 12*t2**4 + 6*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Afinal*t3 + Vfinal)*(2*t1**2*t2**3 - t1**2*t2*t3**2 + 6*t1*t2**4 - 3*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Ainit*t1 - Vinit)*(-t1**2*t2*t3**2 - 6*t1*t2**4 + 3*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Afinal*t3**2/2 + P3 - Vfinal*t3)*(6*t1**2*t2**2 - 4*t1**2*t3**2 + 18*t1*t2**3 - 12*t1*t2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Ainit*t1**2/2 + P1 - Vinit*t1**2)*(2*t1*t2*t3**2 + 12*t2**4 - 6*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)], 
                [Afinal*(-2*t1*t2**3*t3**2 - 3*t2**4*t3**2)/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2) - Ainit*t2**2*t3**2/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2) + P2*(-t1*t2*t3**2 - 3*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) - t1*t2**2*t3**2*(-Ainit*t1 - Vinit)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + 2*t2**2*t3**2*(-Ainit*t1**2/2 + P1 - Vinit*t1**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Afinal*t3 + Vfinal)*(t1**2*t2*t3**2 + 2*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Afinal*t3**2/2 + P3 - Vfinal*t3)*(4*t1**2*t3**2 + 4*t1*t2**3 + 8*t1*t2*t3**2 + 6*t2**4)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)], 
                [Afinal*(-2*t1*t2**3*t3**2 - 3*t2**4*t3**2)/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2) - Ainit*t2**2*t3**2/(6*t1**2*t3**2 + 24*t1*t2**3 + 36*t2**4 - 18*t2**2*t3**2) + P2*(-t1*t2*t3**2 - 3*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + t1*t2**2*t3**2*(-Ainit*t1 - Vinit)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + 2*t2**2*t3**2*(-Ainit*t1**2/2 + P1 - Vinit*t1**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Afinal*t3 + Vfinal)*(t1**2*t2*t3**2 + 2*t1*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2) + (-Afinal*t3**2/2 + P3 - Vfinal*t3)*(3*t1**2*t3**2 + 8*t1*t2*t3**2 + 3*t2**2*t3**2)/(t1**2*t3**2 + 4*t1*t2**3 + 6*t2**4 - 3*t2**2*t3**2)]])

Y1 = np.array([[X1[0, 0],
                X1[1, 0],
                X1[2, 0],
                X1[3, 0],
                X1[4, 0],
                X1[5, 0],
                X1[6, 0],]])
# display(Y1)


#%%
r11,r12,r13,r21,r22,r23,r31,r32,r33 = symbols("r11 r12 r13 r21 r22 r23 r31 r32 r33")
dr11,dr12,dr13,dr21,dr22,dr23,dr31,dr32,dr33 = symbols("dr11 dr12 dr13 dr21 dr22 dr23 dr31 dr32 dr33")

RT = sympy.Matrix([[r11, r12, r13 ], 
                 [r21, r22, r23 ], 
                 [r31, r32, r33 ]])

dR = sympy.Matrix([[dr11, dr21, dr31 ], 
                 [dr12, dr22, dr32 ], 
                 [dr13, dr23, dr33 ]])

display(dR @ RT)

#%%


c = np.cos
s = np.sin
# 定義符號變量
cθ1 ,sθ1 ,cθ2 ,sθ2 ,cθ3 ,sθ3 ,cθ4 ,sθ4 ,cθ5 ,sθ5 = symbols("cθ1 sθ1 cθ2 sθ2 cθ3 sθ3 cθ4 sθ4 cθ5 sθ5")
_0T1 = np.array([[1, 0, 0 ,0], 
                 [0, 1, 0, 0], 
                 [0, 0, 1, 5], 
                 [0, 0, 0 ,1]])
_1T2 = np.array([[cθ1, 0, sθ1,0], 
                 [0, 1, 0, 0], 
                 [-sθ1, 0, cθ1, 5], 
                 [0, 0, 0 ,1]])
_2T3 = np.array([[cθ2, -sθ2, 0, 2], 
                 [sθ2, cθ2, 0, 0], 
                 [0, 0, 1, 0], 
                 [0, 0, 0 ,1]])
_3T4 = np.array([[cθ3, 0, sθ3, 1], 
                 [0, 1, 0, 0], 
                 [-sθ3, 0, cθ3, 0], 
                 [0, 0, 0, 1]])
_4T5 = np.array([[cθ4, 0, sθ4, 0], 
                 [0, 1, 0, 0], 
                 [-sθ3, 0, cθ3, 0], 
                 [0, 0, 0, 1]])
_5T6 = np.array([[1, 0, 0 ,0], 
                 [0, cθ5, -sθ5, 0], 
                 [0, sθ5, cθ5, 0], 
                 [0, 0, 0 ,1]])

_0T2 = _0T1 @ _1T2 
# print(_0T2)

#%%
_0T3 = _0T1 @ _1T2 @ _2T3
print(_0T3)
#%%
_0T4 = _0T1 @ _1T2 @ _2T3 @ _3T4
print(_0T4)
#%%
_0T5 = _0T1 @ _1T2 @ _2T3 @ _3T4 @ _4T5
_0T6 = _0T1 @ _1T2 @ _2T3 @ _3T4 @ _4T5 @ _5T6
print(_0T6)


# %%
_0T4 = np.array([[cθ1*cθ2*cθ3 - sθ1*sθ3, -cθ1*sθ2, cθ1*cθ2*sθ3 + cθ3*sθ1, cθ1*cθ2 + 2*cθ1],
                 [cθ3*sθ2, cθ2 ,sθ2*sθ3 ,sθ2],
                 [-cθ1*sθ3 - cθ2*cθ3*sθ1, sθ1*sθ2, cθ1*cθ3 - cθ2*sθ1*sθ3, -cθ2*sθ1 - 2*sθ1 + 10],
                 [0, 0, 0, 1]])

# %%
cosθ, sinθ, ux, uy, uz = symbols("cosθ sinθ ux uy uz")
u = np.array(([ux],
              [uy],
              [uz],
              [1]))

Rotx = np.array(([1,    0,     0, 0],
                 [0, cosθ, -sinθ, 0],
                 [0, sinθ,  cosθ, 0],
                 [0,    0,     0, 1]))
                 
Roty = np.array(([ cosθ, 0, sinθ, 0],
                 [    0, 1,    0, 0],
                 [-sinθ, 0, cosθ, 0],
                 [    0, 0,    0, 1]))

Rotz = np.array(([cosθ, -sinθ, 0, 0],
                 [sinθ,  cosθ, 0, 0],
                 [   0,     0, 1, 0],
                 [   0,     0, 0, 1]))

display(Rotx @ Roty @ Rotz @ u)



# %%
